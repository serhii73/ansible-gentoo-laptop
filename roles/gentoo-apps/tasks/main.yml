---
- name: Ensure portage dirs structure exists
  file:
    dest: /etc/portage/package.{{ setting_type }}
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
  loop:
  - accept_keywords
  - license
  - mask
  - unmask
  - use
  loop_control:
    loop_var: setting_type
- name: Accept package licenses
  lineinfile:
    create: yes
    line: >-
      {{ license_entry.package }}
      {{ license_entry.licenses }}
    path: >-
      /etc/portage/package.license/{{
          license_entry.package | replace('/', '--')
      }}
    state: present
  loop: >-
    {{
        accept_licenses |
        dict2items(key_name='package', value_name='licenses')
    }}
  loop_control:
    label: >-
      Accepting {{ license_entry.licenses }} terms
      for {{ license_entry.package }}
    loop_var: license_entry

- name: Create patch dirs structure
  file:
    dest: /etc/portage/patches/{{ item }}
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
  loop:
  - dev-libs/cyrus-sasl-2.1.26
  - net-wireless/crda-3.18-r1
  - sys-auth/sssd-2.2.3

- name: Add ebuild user patches
  copy:
    src: "{{ item.value }}"
    dest: /etc/portage/patches/{{ item.key }}/
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  with_dict:
    dev-libs/cyrus-sasl-2.1.26: cyrus-sasl-2.1.26-openssl-1.1.patch
    net-wireless/crda-3.18-r1: crda-openssl-1.1.patch
    sys-auth/sssd-2.2.3: sssd-2.2.3-glibc-2.32-compat.patch

- name: Merge ebuilds
  portage:
    package: "{{ ebuilds_list }}"
    state: emerged
    update: yes
    verbose: yes
    newuse: yes
    loadavg: "{{ emerge_load_average }}"
    jobs: "{{ emerge_jobs_number }}"
  loop:
  - >-
    {{ essential_ebuilds }}
  - >-
    {{ ebuilds }}
  loop_control:
    loop_var: ebuilds_list
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Ensure Vagga installed
  shell: |
    set -euxo pipefail
    curl -sSf https://files.zerogw.com/vagga/vagga-install{{ '-testing' if vagga_testing else '' }}.sh | sh
  args:
    creates: /usr/bin/vagga
- name: Check kernel.unprivileged_userns_clone sysctl value
  command: sysctl kernel.unprivileged_userns_clone
  register: sysctl_cmd
  changed_when: false
  failed_when: >
    (sysctl_cmd.rc != 0 and
     'sysctl: cannot stat /proc/sys/kernel/unprivileged_userns_clone: No such file or directory'
     not in sysctl_cmd.stderr_lines) or
    (sysctl_cmd.rc == 0 and
     'kernel.unprivileged_userns_clone = 0'
     in sysctl_cmd.stdout_lines)
- name: Set up subuid/subgid
  lineinfile:
    create: yes
    line: wk:100000:65536
    path: /etc/sub{{ item }}id
    state: present
  with_items:
  - u
  - g

- name: Load 'tun' kernel module
  modprobe:
    name: tun
    state: present

- name: Configure 'tun' module autoload
  lineinfile:
    create: yes
    line: tun
    path: /etc/modules-load.d/tun.conf

- name: Add a wk group
  group:
    gid: 1000
    name: wk
    state: present

- name: Add wk to docker group
  user:
    append: yes
    comment: Sviat
    createhome: yes
    group: wk
    groups:
    - docker
    name: wk
    shell: /bin/zsh
    state: present
    uid: 1000

- name: Configure network printer lookup in CUPS
  lineinfile:
    insertafter: "# Use BrowsePoll to poll a particular CUPS server"
    line: BrowsePoll cups.brq.redhat.com
    path: /etc/cups/cups-browsed.conf
    regexp: ^BrowsePoll\scups.brq.redhat.com$
    state: present
  notify:
  - ensure-services-started
- name: Configure remote network printer naming in CUPS
  lineinfile:
    insertafter: "# LocalQueueNamingRemoteCUPS RemoteName"
    line: LocalQueueNamingRemoteCUPS RemoteName
    path: /etc/cups/cups-browsed.conf
    regexp: ^LocalQueueNamingRemoteCUPS\sRemoteName$
    state: present
  notify:
  - ensure-services-started

- name: Enable the Bluetooth Fast Connectable setting
  lineinfile:
    insertafter: "#FastConnectable = false"
    line: FastConnectable = true
    path: /etc/bluetooth/main.conf
    regexp: ^FastConnectable\s=\strue$
    state: present
  notify:
  - ensure-services-started

- name: Set up Kerberos
  template:
    src: krb5.conf.template
    dest: /etc/krb5.conf
  notify:
  - ensure-services-started
- name: Set up sssd
  template:
    src: sssd.conf.template
    dest: /etc/sssd/sssd.conf
    mode: u=rw,g=,o=
  notify:
  - ensure-services-started

- name: Set up X.Org X11 server subsystem
  copy:
    src: etc/X11/xorg.conf
    dest: /etc/X11/xorg.conf
    mode: u+rw,g=r,o=r
    owner: root
    group: root

- name: >-
    Set up udev rules: make Android devices accessible by plugdev group
  copy:
    src: etc/udev/rules.d/51-android.rules
    dest: /etc/udev/rules.d/51-android.rules
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  notify:
  - update-udev-rules

- name: Create config dir structure for Google Chrome and Chromium
  file:
    dest: "{{ item.key }}"
    mode: "{{ item.value }}"
    owner: root
    group: root
    state: directory
    recurse: yes
  with_dict:
    /etc/chromium/policies/managed/: u+rwx,g=rx,o=rx
    /etc/chromium/policies/recommended/: u+rwx,g=rwx,o=rx
    /etc/opt/chrome/policies/managed/: u+rwx,g=rx,o=rx
    /etc/opt/chrome/policies/recommended/: u+rwx,g=rwx,o=rx
- name: Set up policies with whitelisted Kerberos servers for Google Chrome and Chromium
  copy:
    src: chrome-redhat-policy.json
    dest: "{{ item }}"
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  with_items:
  - /etc/chromium/policies/managed/redhat.json
  - /etc/opt/chrome/policies/managed/redhat.json

- name: Create a custom trusted CA certificates dir
  file:
    dest: "{{ item.key }}"
    mode: "{{ item.value }}"
    owner: root
    group: root
    state: directory
    recurse: yes
  with_dict:
    /usr/local/share/ca-certificates/: u+rwx,g=rx,o=rx
    /etc/pki/nssdb/: u+rwx,g=rx,o=rx
- name: Create a custom trusted CA certificates user dir
  become: no
  file:
    dest: $HOME/.pki/nssdb/
    mode: u+rwx,g=rx,o=rx
    state: directory
    recurse: yes
- name: Getting Red Hat Legacy Root CA and IT Root CA
  get_url:
    url: https://password.corp.redhat.com/{{ item.value.filename }}.crt
    dest: /usr/local/share/ca-certificates/{{ item.key }}.crt
    checksum: sha256:{{ item.value.sha256sum }}
  with_dict: "{{ ca_certificates }}"
  notify:
  - update-ca-trust
- name: Verify downloaded Red Hat Legacy Root CA and IT Root CA
  shell: |
    set -euxo pipefail
    openssl x509 -noout \
      -in '/usr/local/share/ca-certificates/{{ item.key }}.crt' \
      -fingerprint \
      -sha256 | grep 'SHA256 Fingerprint={{ item.value.sha256fingerprint }}'
  register: sha256fingerprint
  changed_when: false
  failed_when: >
    sha256fingerprint.rc != 0 or
    sha256fingerprint.stdout != (('SHA256 Fingerprint', item.value.sha256fingerprint) | join('='))
  with_dict: "{{ ca_certificates }}"
- name: Install CA certs into NSS database  # noqa 301  # FIXME
  # TODO: check out https://galaxy.ansible.com/pixelart/nssdb
  command: certutil -A -n '{{ item.key }}' -t C -i '/usr/local/share/ca-certificates/{{ item.key }}.crt' -d sql:/etc/pki/nssdb
  with_dict: "{{ ca_certificates }}"
- name: Install CA certs into per-user NSS database, used by Chrome/Firefox  # noqa 301  # FIXME
  become: no
  shell: certutil -A -n '{{ item.key }}' -t C -i '/usr/local/share/ca-certificates/{{ item.key }}.crt' -d sql:$HOME/.pki/nssdb
  with_dict: "{{ ca_certificates }}"
